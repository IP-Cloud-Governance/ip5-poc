# generated by datamodel-codegen:
#   filename:  oscal_complete_schema_v1.1.3.json
#   timestamp: 2025-06-14T14:01:43+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel, constr


class OscalCompleteOscalControlCommonParameterGuideline(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    prose: str = Field(
        ...,
        description='Prose permits multiple paragraphs, lists, tables etc.',
        title='Guideline Text',
    )


class OscalCompleteOscalControlCommonIncludeAll(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )


class Scheme(Enum):
    http___orcid_org_ = 'http://orcid.org/'


class Rel(Enum):
    reference = 'reference'


class Algorithm(Enum):
    SHA_224 = 'SHA-224'
    SHA_256 = 'SHA-256'
    SHA_384 = 'SHA-384'
    SHA_512 = 'SHA-512'
    SHA3_224 = 'SHA3-224'
    SHA3_256 = 'SHA3-256'
    SHA3_384 = 'SHA3-384'
    SHA3_512 = 'SHA3-512'


class OscalCompleteOscalMetadataRemarks(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='Additional commentary about the containing object.',
        title='Remarks',
    )


class Type(Enum):
    home = 'home'
    office = 'office'
    mobile = 'mobile'


class Type1(Enum):
    home = 'home'
    work = 'work'


class Scheme1(Enum):
    http___www_doi_org_ = 'http://www.doi.org/'


class Type2(Enum):
    interconnection = 'interconnection'
    software = 'software'
    hardware = 'hardware'
    service = 'service'
    policy = 'policy'
    physical = 'physical'
    process_procedure = 'process-procedure'
    plan = 'plan'
    guidance = 'guidance'
    standard = 'standard'
    validation = 'validation'


class Type3(Enum):
    this_system = 'this-system'
    system = 'system'
    interconnection = 'interconnection'
    software = 'software'
    hardware = 'hardware'
    service = 'service'
    policy = 'policy'
    physical = 'physical'
    process_procedure = 'process-procedure'
    plan = 'plan'
    guidance = 'guidance'
    standard = 'standard'
    validation = 'validation'
    network = 'network'


class State(Enum):
    implemented = 'implemented'
    partial = 'partial'
    planned = 'planned'
    alternative = 'alternative'
    not_applicable = 'not-applicable'


class IdentifierType(Enum):
    https___fedramp_gov = 'https://fedramp.gov'
    http___fedramp_gov_ns_oscal = 'http://fedramp.gov/ns/oscal'
    https___ietf_org_rfc_rfc4122 = 'https://ietf.org/rfc/rfc4122'
    http___ietf_org_rfc_rfc4122 = 'http://ietf.org/rfc/rfc4122'


class System(Enum):
    http___doi_org_10_6028_NIST_SP_800_60v2r1 = (
        'http://doi.org/10.6028/NIST.SP.800-60v2r1'
    )


class OscalCompleteOscalSspAdjustmentJustification(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='If the selected security level is different from the base security level, this contains the justification for the change.',
        title='Adjustment Justification',
    )


class Type4(Enum):
    milestone = 'milestone'
    action = 'action'


class Type5(Enum):
    component = 'component'
    inventory_item = 'inventory-item'
    location = 'location'
    party = 'party'
    user = 'user'


class Type6(Enum):
    component = 'component'
    inventory_item = 'inventory-item'
    location = 'location'
    party = 'party'
    user = 'user'
    resource = 'resource'


class Reason(Enum):
    pass_ = 'pass'
    fail = 'fail'
    other = 'other'


class Methods(Enum):
    EXAMINE = 'EXAMINE'
    INTERVIEW = 'INTERVIEW'
    TEST = 'TEST'
    UNKNOWN = 'UNKNOWN'


class Types(Enum):
    ssp_statement_issue = 'ssp-statement-issue'
    control_objective = 'control-objective'
    mitigation = 'mitigation'
    finding = 'finding'
    historic = 'historic'


class System1(Enum):
    http___fedramp_gov = 'http://fedramp.gov'
    http___fedramp_gov_ns_oscal = 'http://fedramp.gov/ns/oscal'


class OscalCompleteOscalAssessmentCommonRiskStatus1(Enum):
    open = 'open'
    investigating = 'investigating'
    remediating = 'remediating'
    deviation_requested = 'deviation-requested'
    deviation_approved = 'deviation-approved'
    closed = 'closed'


class System2(Enum):
    http___fedramp_gov = 'http://fedramp.gov'
    http___fedramp_gov_ns_oscal = 'http://fedramp.gov/ns/oscal'
    http___csrc_nist_gov_ns_oscal = 'http://csrc.nist.gov/ns/oscal'
    http___csrc_nist_gov_ns_oscal_unknown = 'http://csrc.nist.gov/ns/oscal/unknown'
    http___cve_mitre_org = 'http://cve.mitre.org'
    http___www_first_org_cvss_v2_0 = 'http://www.first.org/cvss/v2.0'
    http___www_first_org_cvss_v3_0 = 'http://www.first.org/cvss/v3.0'
    http___www_first_org_cvss_v3_1 = 'http://www.first.org/cvss/v3.1'
    https___www_first_org_cvss_v4_0 = 'https://www.first.org/cvss/v4-0'


class Lifecycle(Enum):
    recommendation = 'recommendation'
    planned = 'planned'
    completed = 'completed'


class Name(Enum):
    asset = 'asset'
    method = 'method'
    objective = 'objective'


class Base64Datatype(RootModel[constr(pattern=r'^[0-9A-Za-z+/]+={0,2}$')]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: constr(pattern=r'^[0-9A-Za-z+/]+={0,2}$') = Field(
        ...,
        description='Binary data encoded using the Base 64 encoding algorithm as defined by RFC4648.',
    )


class BooleanDatatype(RootModel[bool]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: bool = Field(..., description='A binary value that is either: true or false.')


class DateDatatype(
    RootModel[
        constr(
            pattern=r'^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))?$'
        )
    ]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: constr(
        pattern=r'^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))?$'
    ) = Field(
        ...,
        description='A string representing a 24-hour period with an optional timezone.',
    )


class DateTimeWithTimezoneDatatype(RootModel[datetime]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: datetime = Field(
        ...,
        description='A string representing a point in time with a required timezone.',
    )


class IntegerDatatype(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: int = Field(..., description='A whole number value.')


class NonNegativeIntegerDatatype(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class PositiveIntegerDatatype(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class StringDatatype(RootModel[constr(pattern=r'^\S(.*\S)?$')]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: constr(pattern=r'^\S(.*\S)?$') = Field(
        ...,
        description='A non-empty string with leading and trailing whitespace disallowed. Whitespace is: U+9, U+10, U+32 or [ \n\t]+',
    )


class TokenDatatype(RootModel[constr(pattern=r'^(\p{L}|_)(\p{L}|\p{N}|[.\-_])*$')]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: constr(pattern=r'^(\p{L}|_)(\p{L}|\p{N}|[.\-_])*$') = Field(
        ...,
        description='A non-colonized name as defined by XML Schema Part 2: Datatypes Second Edition. https://www.w3.org/TR/xmlschema11-2/#NCName.',
    )


class URIDatatype(RootModel[AnyUrl]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: AnyUrl = Field(
        ...,
        description='A universal resource identifier (URI) formatted according to RFC3986.',
    )


class URIReferenceDatatype(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str = Field(
        ...,
        description='A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986.',
    )


class UUIDDatatype(
    RootModel[
        constr(
            pattern=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: constr(
        pattern=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description="A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.",
    )


class JsonSchemaDirective(RootModel[URIReferenceDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: URIReferenceDatatype = Field(
        ...,
        description='A JSON Schema directive to bind a specific schema to its document instance.',
        title='Schema Directive',
    )


class Test(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    expression: StringDatatype = Field(
        ...,
        description='A formal (executable) expression of a constraint.',
        title='Constraint test',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalControlCommonParameterConstraint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description='A textual summary of the constraint to be applied.',
        title='Constraint Description',
    )
    tests: Optional[List[Test]] = Field(None, min_length=1)


class OscalCompleteOscalControlCommonParameterValue(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ..., description='A parameter value or set of values.', title='Parameter Value'
    )


class OscalCompleteOscalControlCommonParameterSelection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    how_many: Optional[TokenDatatype] = Field(
        None,
        alias='how-many',
        description='Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.',
        title='Parameter Cardinality',
    )
    choice: Optional[List[str]] = Field(None, min_length=1)


class ExternalId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    scheme: Union[URIDatatype, Scheme] = Field(
        ...,
        description='Indicates the type of external identifier.',
        title='External Identifier Schema',
    )
    id: StringDatatype


class OscalCompleteOscalMetadataLocationUuid(RootModel[UUIDDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: UUIDDatatype = Field(
        ...,
        description='Reference to a location by UUID.',
        title='Location Universally Unique Identifier Reference',
    )


class OscalCompleteOscalMetadataPartyUuid(RootModel[UUIDDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: UUIDDatatype = Field(
        ...,
        description='Reference to a party by UUID.',
        title='Party Universally Unique Identifier Reference',
    )


class OscalCompleteOscalMetadataRoleId(RootModel[TokenDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: TokenDatatype = Field(
        ...,
        description='Reference to a role by UUID.',
        title='Role Identifier Reference',
    )


class Base64(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    filename: Optional[TokenDatatype] = Field(
        None,
        description='Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.',
        title='File Name',
    )
    media_type: Optional[StringDatatype] = Field(
        None,
        alias='media-type',
        description='A label that indicates the nature of a resource, as a data serialization or format.',
        title='Media Type',
    )
    value: Base64Datatype


class OscalCompleteOscalMetadataProperty(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    name: TokenDatatype = Field(
        ...,
        description="A textual label, within a namespace, that identifies a specific attribute, characteristic, or quality of the property's containing object.",
        title='Property Name',
    )
    uuid: Optional[UUIDDatatype] = Field(
        None,
        description='A unique identifier for a property.',
        title='Property Universally Unique Identifier',
    )
    ns: Optional[URIDatatype] = Field(
        None,
        description="A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.",
        title='Property Namespace',
    )
    value: StringDatatype = Field(
        ...,
        description='Indicates the value of the attribute, characteristic, or quality.',
        title='Property Value',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description="A textual label that provides a sub-type or characterization of the property's name.",
        title='Property Class',
    )
    group: Optional[TokenDatatype] = Field(
        None,
        description='An identifier for relating distinct sets of properties.',
        title='Property Group',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A resolvable URL reference to a resource.',
        title='Hypertext Reference',
    )
    rel: Optional[Union[TokenDatatype, Rel]] = Field(
        None,
        description="Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.",
        title='Link Relation Type',
    )
    media_type: Optional[StringDatatype] = Field(
        None,
        alias='media-type',
        description='A label that indicates the nature of a resource, as a data serialization or format.',
        title='Media Type',
    )
    resource_fragment: Optional[StringDatatype] = Field(
        None,
        alias='resource-fragment',
        description='In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.',
        title='Resource Fragment',
    )
    text: Optional[str] = Field(
        None,
        description='A textual label to associate with the link, which may be used for presentation in a tool.',
        title='Link Text',
    )


class OscalCompleteOscalMetadataResponsibleParty(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    role_id: TokenDatatype = Field(
        ...,
        alias='role-id',
        description='A reference to a role performed by a party.',
        title='Responsible Role',
    )
    party_uuids: List[OscalCompleteOscalMetadataPartyUuid] = Field(
        ..., alias='party-uuids', min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A unique identifier that can be used to reference this defined action elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.',
        title='Action Universally Unique Identifier',
    )
    date: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='The date and time when the action occurred.',
        title='Action Occurrence Date',
    )
    type: TokenDatatype = Field(
        ...,
        description='The type of action documented by the assembly, such as an approval.',
        title='Action Type',
    )
    system: URIDatatype = Field(
        ...,
        description='Specifies the action type system used.',
        title='Action Type System',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataResponsibleRole(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    role_id: TokenDatatype = Field(
        ...,
        alias='role-id',
        description='A human-oriented identifier reference to a role performed.',
        title='Responsible Role ID',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    party_uuids: Optional[List[OscalCompleteOscalMetadataPartyUuid]] = Field(
        None, alias='party-uuids', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataHash(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    algorithm: Union[StringDatatype, Algorithm] = Field(
        ...,
        description='The digest method by which a hash is derived.',
        title='Hash algorithm',
    )
    value: StringDatatype


class OscalCompleteOscalMetadataPublished(RootModel[DateTimeWithTimezoneDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='The date and time the document was last made available.',
        title='Publication Timestamp',
    )


class OscalCompleteOscalMetadataLastModified(RootModel[DateTimeWithTimezoneDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='The date and time the document was last stored for later retrieval.',
        title='Last Modified Timestamp',
    )


class OscalCompleteOscalMetadataVersion(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ...,
        description='Used to distinguish a specific revision of an OSCAL document from other previous and future versions.',
        title='Document Version',
    )


class OscalCompleteOscalMetadataOscalVersion(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ...,
        description='The OSCAL model version the document was authored against and will conform to as valid.',
        title='OSCAL Version',
    )


class OscalCompleteOscalMetadataTelephoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    type: Optional[Union[StringDatatype, Type]] = Field(
        None, description='Indicates the type of phone number.', title='type flag'
    )
    number: StringDatatype


class OscalCompleteOscalMetadataAddrLine(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ..., description='A single line of an address.', title='Address line'
    )


class OscalCompleteOscalMetadataDocumentId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    scheme: Optional[Union[URIDatatype, Scheme1]] = Field(
        None,
        description='Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.',
        title='Document Identification Scheme',
    )
    identifier: StringDatatype


class Combine(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    method: Optional[StringDatatype] = Field(
        None,
        description='Declare how clashing controls should be handled.',
        title='Combination Method',
    )


class SetParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    param_id: TokenDatatype = Field(
        ...,
        alias='param-id',
        description='An identifier for the parameter.',
        title='Parameter ID',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description='A textual label that provides a characterization of the parameter.',
        title='Parameter Class',
    )
    depends_on: Optional[TokenDatatype] = Field(
        None,
        alias='depends-on',
        description='**(deprecated)** Another parameter invoking this one. This construct has been deprecated and should not be used.',
        title='Depends On',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    label: Optional[str] = Field(
        None,
        description='A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.',
        title='Parameter Label',
    )
    usage: Optional[str] = Field(
        None,
        description='Describes the purpose and use of a parameter.',
        title='Parameter Usage Description',
    )
    constraints: Optional[List[OscalCompleteOscalControlCommonParameterConstraint]] = (
        Field(None, min_length=1)
    )
    guidelines: Optional[List[OscalCompleteOscalControlCommonParameterGuideline]] = (
        Field(None, min_length=1)
    )
    values: Optional[List[OscalCompleteOscalControlCommonParameterValue]] = Field(
        None, min_length=1
    )
    select: Optional[OscalCompleteOscalControlCommonParameterSelection] = None


class Remove(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    by_name: Optional[TokenDatatype] = Field(
        None,
        alias='by-name',
        description='Identify items remove by matching their assigned name.',
        title='Reference by (assigned) name',
    )
    by_class: Optional[TokenDatatype] = Field(
        None,
        alias='by-class',
        description='Identify items to remove by matching their class.',
        title='Reference by class',
    )
    by_id: Optional[TokenDatatype] = Field(
        None,
        alias='by-id',
        description='Identify items to remove indicated by their id.',
        title='Reference by ID',
    )
    by_item_name: Optional[TokenDatatype] = Field(
        None,
        alias='by-item-name',
        description="Identify items to remove by the name of the item's information object name, e.g. title or prop.",
        title='Item Name Reference',
    )
    by_ns: Optional[TokenDatatype] = Field(
        None,
        alias='by-ns',
        description="Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.",
        title='Item Namespace Reference',
    )


class OscalCompleteOscalProfileWithId(RootModel[TokenDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: TokenDatatype = Field(
        ...,
        description='Selecting a control by its ID given as a literal.',
        title='Match Controls by Identifier',
    )


class OscalCompleteOscalProfileMatching(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pattern: Optional[StringDatatype] = Field(
        None,
        description='A glob expression matching the IDs of one or more controls to be selected.',
        title='Pattern',
    )


class OscalCompleteOscalComponentDefinitionImportComponentDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A link to a resource that defines a set of components and/or capabilities to import into this collection.',
        title='Hyperlink Reference',
    )


class OscalCompleteOscalComponentDefinitionIncorporatesComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    component_uuid: UUIDDatatype = Field(
        ...,
        alias='component-uuid',
        description='A machine-oriented identifier reference to a component.',
        title='Component Reference',
    )
    description: str = Field(
        ...,
        description='A description of the component, including information about its function.',
        title='Component Description',
    )


class OscalCompleteOscalComponentDefinitionStatement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    statement_id: TokenDatatype = Field(
        ...,
        alias='statement-id',
        description='A human-oriented identifier reference to a control statement.',
        title='Control Statement Reference',
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control statement elsewhere in this or other OSCAL instances. The UUID of the control statement in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).',
        title='Control Statement Reference Universally Unique Identifier',
    )
    description: str = Field(
        ...,
        description='A summary of how the containing control statement is implemented by the component or capability.',
        title='Statement Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    state: TokenDatatype = Field(
        ..., description='The operational status.', title='State'
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonPortRange(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    start: Optional[NonNegativeIntegerDatatype] = Field(
        None,
        description='Indicates the starting port number in a port range for a transport layer protocol',
        title='Start',
    )
    end: Optional[NonNegativeIntegerDatatype] = Field(
        None,
        description='Indicates the ending port number in a port range for a transport layer protocol',
        title='End',
    )
    transport: Optional[TokenDatatype] = Field(
        None, description='Indicates the transport type.', title='Transport'
    )


class OscalCompleteOscalImplementationCommonImplementationStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    state: Union[TokenDatatype, State] = Field(
        ...,
        description='Identifies the implementation status of the control or control objective.',
        title='Implementation State',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonFunctionPerformed(
    RootModel[StringDatatype]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ...,
        description='Describes a function performed for a given authorized privilege by this user class.',
        title='Functions Performed',
    )


class ImplementedComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    component_uuid: UUIDDatatype = Field(
        ...,
        alias='component-uuid',
        description='A machine-oriented identifier reference to a component that is implemented as part of an inventory item.',
        title='Component Universally Unique Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonInventoryItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this inventory item elsewhere in this or other OSCAL instances. The locally defined UUID of the inventory item can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Inventory Item Universally Unique Identifier',
    )
    description: str = Field(
        ...,
        description='A summary of the inventory item stating its purpose within the system.',
        title='Inventory Item Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    implemented_components: Optional[List[ImplementedComponent]] = Field(
        None, alias='implemented-components', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonSetParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    param_id: TokenDatatype = Field(
        ...,
        alias='param-id',
        description="A human-oriented reference to a parameter within a control, who's catalog has been imported into the current implementation context.",
        title='Parameter ID',
    )
    values: List[StringDatatype] = Field(..., min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonSystemId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    identifier_type: Optional[Union[URIDatatype, IdentifierType]] = Field(
        None,
        alias='identifier-type',
        description='Identifies the identification system from which the provided identifier was assigned.',
        title='Identification System Type',
    )
    id: StringDatatype


class OscalCompleteOscalSspImportProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description="A resolvable URL reference to the profile or catalog to use as the system's control baseline.",
        title='Profile Reference',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Categorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    system: Union[URIDatatype, System] = Field(
        ...,
        description='Specifies the information type identification system used.',
        title='Information Type Identification System',
    )
    information_type_ids: Optional[List[StringDatatype]] = Field(
        None, alias='information-type-ids', min_length=1
    )


class OscalCompleteOscalSspBase(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ...,
        description='The prescribed base (Confidentiality, Integrity, or Availability) security impact level.',
        title='Base Level (Confidentiality, Integrity, or Availability)',
    )


class OscalCompleteOscalSspSelected(RootModel[StringDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: StringDatatype = Field(
        ...,
        description='The selected (Confidentiality, Integrity, or Availability) security impact level.',
        title='Selected Level (Confidentiality, Integrity, or Availability)',
    )


class OscalCompleteOscalSspSecurityImpactLevel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    security_objective_confidentiality: StringDatatype = Field(
        ...,
        alias='security-objective-confidentiality',
        description='A target-level of confidentiality for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Confidentiality',
    )
    security_objective_integrity: StringDatatype = Field(
        ...,
        alias='security-objective-integrity',
        description='A target-level of integrity for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Integrity',
    )
    security_objective_availability: StringDatatype = Field(
        ...,
        alias='security-objective-availability',
        description='A target-level of availability for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Availability',
    )


class OscalCompleteOscalSspStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    state: StringDatatype = Field(
        ..., description='The current operating status.', title='State'
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspDateAuthorized(RootModel[DateDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: DateDatatype = Field(
        ...,
        description='The date the system received its authorization.',
        title='System Authorization Date',
    )


class OscalCompleteOscalSspDiagram(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this diagram elsewhere in this or other OSCAL instances. The locally defined UUID of the diagram can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Diagram ID',
    )
    description: Optional[str] = Field(
        None, description='A summary of the diagram.', title='Diagram Description'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    caption: Optional[str] = Field(
        None, description='A brief caption to annotate the diagram.', title='Caption'
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspNetworkArchitecture(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: str = Field(
        ...,
        description="A summary of the system's network architecture.",
        title='Network Architecture Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    diagrams: Optional[List[OscalCompleteOscalSspDiagram]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspDataFlow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: str = Field(
        ...,
        description="A summary of the system's data flow.",
        title='Data Flow Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    diagrams: Optional[List[OscalCompleteOscalSspDiagram]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class LeveragedAuthorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope and can be used to reference this leveraged authorization elsewhere in this or other OSCAL instances. The locally defined UUID of the leveraged authorization can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Leveraged Authorization Universally Unique Identifier',
    )
    title: str = Field(
        ...,
        description='A human readable name for the leveraged authorization in the context of the system.',
        title='title field',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    party_uuid: UUIDDatatype = Field(
        ...,
        alias='party-uuid',
        description='A machine-oriented identifier reference to the party that manages the leveraged system.',
        title='party-uuid field',
    )
    date_authorized: OscalCompleteOscalSspDateAuthorized = Field(
        ..., alias='date-authorized'
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class ProvidedItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this provided entry elsewhere in this or other OSCAL instances. The locally defined UUID of the provided entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Provided Universally Unique Identifier',
    )
    description: str = Field(
        ...,
        description='An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system.',
        title='Provided Control Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Responsibility(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this responsibility elsewhere in this or other OSCAL instances. The locally defined UUID of the responsibility can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Responsibility Universally Unique Identifier',
    )
    provided_uuid: Optional[UUIDDatatype] = Field(
        None,
        alias='provided-uuid',
        description='A machine-oriented identifier reference to an inherited control implementation that a leveraging system is inheriting from a leveraged system.',
        title='Provided UUID',
    )
    description: str = Field(
        ...,
        description='An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system.',
        title='Control Implementation Responsibility Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Export(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description='An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system.',
        title='Control Implementation Export Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    provided: Optional[List[ProvidedItem]] = Field(None, min_length=1)
    responsibilities: Optional[List[Responsibility]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class InheritedItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this inherited entry elsewhere in this or other OSCAL instances. The locally defined UUID of the inherited control implementation can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Inherited Universally Unique Identifier',
    )
    provided_uuid: Optional[UUIDDatatype] = Field(
        None,
        alias='provided-uuid',
        description='A machine-oriented identifier reference to an inherited control implementation that a leveraging system is inheriting from a leveraged system.',
        title='Provided UUID',
    )
    description: str = Field(
        ...,
        description='An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system.',
        title='Inherited Control Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )


class SatisfiedItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this satisfied control implementation entry elsewhere in this or other OSCAL instances. The locally defined UUID of the control implementation can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Satisfied Universally Unique Identifier',
    )
    responsibility_uuid: Optional[UUIDDatatype] = Field(
        None,
        alias='responsibility-uuid',
        description='A machine-oriented identifier reference to a control implementation that satisfies a responsibility imposed by a leveraged system.',
        title='Responsibility UUID',
    )
    description: str = Field(
        ...,
        description='An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system.',
        title='Satisfied Control Implementation Responsibility Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspByComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    component_uuid: UUIDDatatype = Field(
        ...,
        alias='component-uuid',
        description='A machine-oriented identifier reference to the component that is implemeting a given control.',
        title='Component Universally Unique Identifier Reference',
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this by-component entry elsewhere in this or other OSCAL instances. The locally defined UUID of the by-component entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='By-Component Universally Unique Identifier',
    )
    description: str = Field(
        ...,
        description='An implementation statement that describes how a control or a control statement is implemented within the referenced system component.',
        title='Control Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    set_parameters: Optional[
        List[OscalCompleteOscalImplementationCommonSetParameter]
    ] = Field(None, alias='set-parameters', min_length=1)
    implementation_status: Optional[
        OscalCompleteOscalImplementationCommonImplementationStatus
    ] = Field(None, alias='implementation-status')
    export: Optional[Export] = Field(
        None,
        description='Identifies content intended for external consumption, such as with leveraged organizations.',
        title='Export',
    )
    inherited: Optional[List[InheritedItem]] = Field(None, min_length=1)
    satisfied: Optional[List[SatisfiedItem]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonImportSsp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A resolvable URL reference to the system security plan for the system being assessed.',
        title='System Security Plan Reference',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OnDate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    date: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='The task must occur on the specified date.',
        title='On Date Condition',
    )


class WithinDateRange(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    start: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='The task must occur on or after the specified date.',
        title='Start Date Condition',
    )
    end: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='The task must occur on or before the specified date.',
        title='End Date Condition',
    )


class AtFrequency(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    period: PositiveIntegerDatatype = Field(
        ...,
        description='The task must occur after the specified period has elapsed.',
        title='Period',
    )
    unit: StringDatatype = Field(
        ..., description='The unit of time for the period.', title='Time Unit'
    )


class Timing(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    on_date: Optional[OnDate] = Field(
        None,
        alias='on-date',
        description='The task is intended to occur on the specified date.',
        title='On Date Condition',
    )
    within_date_range: Optional[WithinDateRange] = Field(
        None,
        alias='within-date-range',
        description='The task is intended to occur within the specified date range.',
        title='On Date Range Condition',
    )
    at_frequency: Optional[AtFrequency] = Field(
        None,
        alias='at-frequency',
        description='The task is intended to occur at the specified frequency.',
        title='Frequency Condition',
    )


class Dependency(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    task_uuid: UUIDDatatype = Field(
        ...,
        alias='task-uuid',
        description='A machine-oriented identifier reference to a unique task.',
        title='Task Universally Unique Identifier Reference',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonSelectControlById(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    control_id: TokenDatatype = Field(
        ...,
        alias='control-id',
        description='A reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).',
        title='Control Identifier Reference',
    )
    statement_ids: Optional[List[TokenDatatype]] = Field(
        None, alias='statement-ids', min_length=1
    )


class OscalCompleteOscalAssessmentCommonSelectObjectiveById(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    objective_id: TokenDatatype = Field(
        ...,
        alias='objective-id',
        description='Points to an assessment objective.',
        title='Objective ID',
    )


class Source(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    task_uuid: UUIDDatatype = Field(
        ...,
        alias='task-uuid',
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference (in this or other OSCAL instances) an assessment activity to be performed as part of the event. The locally defined UUID of the task can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Task Universally Unique Identifier',
    )


class OscalCompleteOscalAssessmentCommonAssessmentSubjectPlaceholder(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier for a set of assessment subjects that will be identified by a task or an activity that is part of a task. The locally defined UUID of the assessment subject placeholder can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Subject Placeholder Universally Unique Identifier',
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of intent of this assessment subject placeholder.',
        title='Assessment Subject Placeholder Description',
    )
    sources: List[Source] = Field(..., min_length=1)
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonSelectSubjectById(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    subject_uuid: UUIDDatatype = Field(
        ...,
        alias='subject-uuid',
        description="A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using it's UUID.",
        title='Subject Universally Unique Identifier Reference',
    )
    type: Union[TokenDatatype, Type6] = Field(
        ...,
        description='Used to indicate the type of object pointed to by the uuid-ref within a subject.',
        title='Subject Universally Unique Identifier Reference Type',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonSubjectReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    subject_uuid: UUIDDatatype = Field(
        ...,
        alias='subject-uuid',
        description="A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using it's UUID.",
        title='Subject Universally Unique Identifier Reference',
    )
    type: Union[TokenDatatype, Type6] = Field(
        ...,
        description='Used to indicate the type of object pointed to by the uuid-ref within a subject.',
        title='Subject Universally Unique Identifier Reference Type',
    )
    title: Optional[str] = Field(
        None,
        description='The title or name for the referenced subject.',
        title='Subject Reference Title',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class UsesComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    component_uuid: UUIDDatatype = Field(
        ...,
        alias='component-uuid',
        description='A machine-oriented identifier reference to a component that is implemented as part of an inventory item.',
        title='Component Universally Unique Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class AssessmentPlatform(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment platform elsewhere in this or other OSCAL instances. The locally defined UUID of the assessment platform can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Platform Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None,
        description='The title or name for the assessment platform.',
        title='Assessment Platform Title',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    uses_components: Optional[List[UsesComponent]] = Field(
        None, alias='uses-components', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Status1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    state: TokenDatatype = Field(
        ...,
        description='An indication as to whether the objective is satisfied or not.',
        title='Objective Status State',
    )
    reason: Optional[Union[TokenDatatype, Reason]] = Field(
        None,
        description="The reason the objective was given it's status.",
        title='Objective Status Reason',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonFindingTarget(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    type: StringDatatype = Field(
        ...,
        description='Identifies the type of the target.',
        title='Finding Target Type',
    )
    target_id: TokenDatatype = Field(
        ...,
        alias='target-id',
        description='A machine-oriented identifier reference for a specific target qualified by the type.',
        title='Finding Target Identifier Reference',
    )
    title: Optional[str] = Field(
        None,
        description='The title for this objective status.',
        title='Objective Status Title',
    )
    description: Optional[str] = Field(
        None,
        description="A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.",
        title='Objective Status Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    status: Status1 = Field(
        ...,
        description='A determination of if the objective is satisfied or not within a given system.',
        title='Objective Status',
    )
    implementation_status: Optional[
        OscalCompleteOscalImplementationCommonImplementationStatus
    ] = Field(None, alias='implementation-status')
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class RelatedObservation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    observation_uuid: UUIDDatatype = Field(
        ...,
        alias='observation-uuid',
        description='A machine-oriented identifier reference to an observation defined in the list of observations.',
        title='Observation Universally Unique Identifier Reference',
    )


class RelatedRisk(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    risk_uuid: UUIDDatatype = Field(
        ...,
        alias='risk-uuid',
        description='A machine-oriented identifier reference to a risk defined in the list of risks.',
        title='Risk Universally Unique Identifier Reference',
    )


class RelevantEvidenceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: Optional[URIReferenceDatatype] = Field(
        None,
        description='A resolvable URL reference to relevant evidence.',
        title='Relevant Evidence Reference',
    )
    description: str = Field(
        ...,
        description='A human-readable description of this evidence.',
        title='Relevant Evidence Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonOriginActor(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    type: TokenDatatype = Field(
        ..., description='The kind of actor.', title='Actor Type'
    )
    actor_uuid: UUIDDatatype = Field(
        ...,
        alias='actor-uuid',
        description='A machine-oriented identifier reference to the tool or person based on the associated type.',
        title='Actor Universally Unique Identifier Reference',
    )
    role_id: Optional[TokenDatatype] = Field(
        None,
        alias='role-id',
        description='For a party, this can optionally be used to specify the role the actor was performing.',
        title='Actor Role',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)


class OscalCompleteOscalAssessmentCommonThreatId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    system: Union[URIDatatype, System1] = Field(
        ...,
        description='Specifies the source of the threat information.',
        title='Threat Type Identification System',
    )
    href: Optional[URIReferenceDatatype] = Field(
        None,
        description='An optional location for the threat data, from which this ID originates.',
        title='Threat Information Resource Reference',
    )
    id: URIDatatype


class MitigatingFactor(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this mitigating factor elsewhere in this or other OSCAL instances. The locally defined UUID of the mitigating factor can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Mitigating Factor Universally Unique Identifier',
    )
    implementation_uuid: Optional[UUIDDatatype] = Field(
        None,
        alias='implementation-uuid',
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this implementation statement elsewhere in this or other OSCAL instancess. The locally defined UUID of the implementation statement can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Implementation UUID',
    )
    description: str = Field(
        ...,
        description='A human-readable description of this mitigating factor.',
        title='Mitigating Factor Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    subjects: Optional[List[OscalCompleteOscalAssessmentCommonSubjectReference]] = (
        Field(None, min_length=1)
    )


class OscalCompleteOscalAssessmentCommonLoggedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    party_uuid: UUIDDatatype = Field(
        ...,
        alias='party-uuid',
        description='A machine-oriented identifier reference to the party who is making the log entry.',
        title='Party UUID Reference',
    )
    role_id: Optional[TokenDatatype] = Field(
        None,
        alias='role-id',
        description='A point to the role-id of the role in which the party is making the log entry.',
        title='Actor Role',
    )


class OscalCompleteOscalAssessmentCommonRiskStatus(
    RootModel[Union[TokenDatatype, OscalCompleteOscalAssessmentCommonRiskStatus1]]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Union[TokenDatatype, OscalCompleteOscalAssessmentCommonRiskStatus1] = Field(
        ...,
        description='Describes the status of the associated risk.',
        title='Risk Status',
    )


class Facet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    name: TokenDatatype = Field(
        ...,
        description='The name of the risk metric within the specified system.',
        title='Facet Name',
    )
    system: Union[URIDatatype, System2] = Field(
        ...,
        description='Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.',
        title='Naming System',
    )
    value: StringDatatype = Field(
        ..., description='Indicates the value of the facet.', title='Facet Value'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class RequiredAsset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this required asset elsewhere in this or other OSCAL instances. The locally defined UUID of the asset can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Required Universally Unique Identifier',
    )
    subjects: Optional[List[OscalCompleteOscalAssessmentCommonSubjectReference]] = (
        Field(None, min_length=1)
    )
    title: Optional[str] = Field(
        None,
        description='The title for this required asset.',
        title='Title for Required Asset',
    )
    description: str = Field(
        ...,
        description='A human-readable description of this required asset.',
        title='Description of Required Asset',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonAssessmentPart(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: Optional[UUIDDatatype] = Field(
        None,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this part elsewhere in this or other OSCAL instances. The locally defined UUID of the part can be used to reference the data item locally or globally (e.g., in an ported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Part Identifier',
    )
    name: Union[TokenDatatype, Name] = Field(
        ...,
        description="A textual label that uniquely identifies the part's semantic type.",
        title='Part Name',
    )
    ns: Optional[URIDatatype] = Field(
        None,
        description="A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.",
        title='Part Namespace',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description="A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.",
        title='Part Class',
    )
    title: Optional[str] = Field(
        None,
        description='A name given to the part, which may be used by a tool for display and navigation.',
        title='Part Title',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    prose: Optional[str] = Field(
        None,
        description='Permits multiple paragraphs, lists, tables etc.',
        title='Part Text',
    )
    parts: Optional[List[OscalCompleteOscalAssessmentCommonAssessmentPart]] = None
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)


class Attestation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    parts: List[OscalCompleteOscalAssessmentCommonAssessmentPart] = Field(
        ..., min_length=1
    )


class OscalCompleteOscalArImportAp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A resolvable URL reference to the assessment plan governing the assessment activities.',
        title='Assessment Plan Reference',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Origin(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    actors: List[OscalCompleteOscalAssessmentCommonOriginActor] = Field(
        ..., min_length=1
    )


class RelatedFinding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    finding_uuid: UUIDDatatype = Field(
        ...,
        alias='finding-uuid',
        description='A machine-oriented identifier reference to a finding defined in the list of findings.',
        title='Finding Universally Unique Identifier Reference',
    )


class OscalCompleteOscalPoamPoamItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: Optional[UUIDDatatype] = Field(
        None,
        description='A machine-oriented, globally unique identifier with instance scope that can be used to reference this POA&M item entry in this OSCAL instance. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='POA&M Item Universally Unique Identifier',
    )
    title: str = Field(
        ...,
        description='The title or name for this POA&M item .',
        title='POA&M Item Title',
    )
    description: str = Field(
        ...,
        description='A human-readable description of POA&M item.',
        title='POA&M Item Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    origins: Optional[List[Origin]] = Field(None, min_length=1)
    related_findings: Optional[List[RelatedFinding]] = Field(
        None, alias='related-findings', min_length=1
    )
    related_observations: Optional[List[RelatedObservation]] = Field(
        None, alias='related-observations', min_length=1
    )
    related_risks: Optional[List[RelatedRisk]] = Field(
        None, alias='related-risks', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class EmailAddressDatatype(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class OscalCompleteOscalControlCommonPart(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: Optional[TokenDatatype] = Field(
        None, description='A unique identifier for the part.', title='Part Identifier'
    )
    name: TokenDatatype = Field(
        ...,
        description="A textual label that uniquely identifies the part's semantic type, which exists in a value space qualified by the ns.",
        title='Part Name',
    )
    ns: Optional[URIDatatype] = Field(
        None,
        description="An optional namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.",
        title='Part Namespace',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description="An optional textual providing a sub-type or characterization of the part's name, or a category to which the part belongs.",
        title='Part Class',
    )
    title: Optional[str] = Field(
        None,
        description='An optional name given to the part, which may be used by a tool for display and navigation.',
        title='Part Title',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    prose: Optional[str] = Field(
        None,
        description='Permits multiple paragraphs, lists, tables etc.',
        title='Part Text',
    )
    parts: Optional[List[OscalCompleteOscalControlCommonPart]] = None
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)


class OscalCompleteOscalControlCommonParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: TokenDatatype = Field(
        ...,
        description='A unique identifier for the parameter.',
        title='Parameter Identifier',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description='A textual label that provides a characterization of the type, purpose, use or scope of the parameter.',
        title='Parameter Class',
    )
    depends_on: Optional[TokenDatatype] = Field(
        None,
        alias='depends-on',
        description='(deprecated) Another parameter invoking this one. This construct has been deprecated and should not be used.',
        title='Depends on',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    label: Optional[str] = Field(
        None,
        description='A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.',
        title='Parameter Label',
    )
    usage: Optional[str] = Field(
        None,
        description='Describes the purpose and use of a parameter.',
        title='Parameter Usage Description',
    )
    constraints: Optional[List[OscalCompleteOscalControlCommonParameterConstraint]] = (
        Field(None, min_length=1)
    )
    guidelines: Optional[List[OscalCompleteOscalControlCommonParameterGuideline]] = (
        Field(None, min_length=1)
    )
    values: Optional[List[OscalCompleteOscalControlCommonParameterValue]] = Field(
        None, min_length=1
    )
    select: Optional[OscalCompleteOscalControlCommonParameterSelection] = None
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Revision(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    title: Optional[str] = Field(
        None,
        description='A name given to the document revision, which may be used by a tool for display and navigation.',
        title='Document Title',
    )
    published: Optional[OscalCompleteOscalMetadataPublished] = None
    last_modified: Optional[OscalCompleteOscalMetadataLastModified] = Field(
        None, alias='last-modified'
    )
    version: OscalCompleteOscalMetadataVersion
    oscal_version: Optional[OscalCompleteOscalMetadataOscalVersion] = Field(
        None, alias='oscal-version'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Role(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: TokenDatatype = Field(
        ..., description='A unique identifier for the role.', title='Role Identifier'
    )
    title: str = Field(
        ...,
        description='A name given to the role, which may be used by a tool for display and navigation.',
        title='Role Title',
    )
    short_name: Optional[StringDatatype] = Field(
        None,
        alias='short-name',
        description='A short common name, abbreviation, or acronym for the role.',
        title='Role Short Name',
    )
    description: Optional[str] = Field(
        None,
        description="A summary of the role's purpose and associated responsibilities.",
        title='Role Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Citation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    text: str = Field(
        ..., description='A line of citation text.', title='Citation Text'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)


class Rlink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A resolvable URL pointing to the referenced resource.',
        title='Hypertext Reference',
    )
    media_type: Optional[StringDatatype] = Field(
        None,
        alias='media-type',
        description='A label that indicates the nature of a resource, as a data serialization or format.',
        title='Media Type',
    )
    hashes: Optional[List[OscalCompleteOscalMetadataHash]] = Field(None, min_length=1)


class Resource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A unique identifier for a resource.',
        title='Resource Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None,
        description='An optional name given to the resource, which may be used by a tool for display and navigation.',
        title='Resource Title',
    )
    description: Optional[str] = Field(
        None,
        description='An optional short summary of the resource used to indicate the purpose of the resource.',
        title='Resource Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    document_ids: Optional[List[OscalCompleteOscalMetadataDocumentId]] = Field(
        None, alias='document-ids', min_length=1
    )
    citation: Optional[Citation] = Field(
        None,
        description='An optional citation consisting of end note text using structured markup.',
        title='Citation',
    )
    rlinks: Optional[List[Rlink]] = Field(None, min_length=1)
    base64: Optional[Base64] = Field(
        None,
        description='A resource encoded using the Base64 alphabet defined by RFC 2045.',
        title='Base64',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataBackMatter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    resources: Optional[List[Resource]] = Field(None, min_length=1)


class OscalCompleteOscalMetadataEmailAddress(RootModel[EmailAddressDatatype]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: EmailAddressDatatype = Field(
        ...,
        description='An email address as defined by RFC 5322 Section 3.4.1.',
        title='Email Address',
    )


class OscalCompleteOscalMetadataAddress(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    type: Optional[Union[TokenDatatype, Type1]] = Field(
        None, description='Indicates the type of address.', title='Address Type'
    )
    addr_lines: Optional[List[OscalCompleteOscalMetadataAddrLine]] = Field(
        None, alias='addr-lines', min_length=1
    )
    city: Optional[StringDatatype] = Field(
        None,
        description='City, town or geographical region for the mailing address.',
        title='City',
    )
    state: Optional[StringDatatype] = Field(
        None,
        description='State, province or analogous geographical region for a mailing address.',
        title='State',
    )
    postal_code: Optional[StringDatatype] = Field(
        None,
        alias='postal-code',
        description='Postal or ZIP code for mailing address.',
        title='Postal Code',
    )
    country: Optional[StringDatatype] = Field(
        None,
        description='The ISO 3166-1 alpha-2 country code for the mailing address.',
        title='Country Code',
    )


class Add(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    position: Optional[TokenDatatype] = Field(
        None,
        description='Where to add the new content with respect to the targeted element (beside it or inside it).',
        title='Position',
    )
    by_id: Optional[TokenDatatype] = Field(
        None,
        alias='by-id',
        description='Target location of the addition.',
        title='Reference by ID',
    )
    title: Optional[str] = Field(
        None,
        description='A name given to the control, which may be used by a tool for display and navigation.',
        title='Title Change',
    )
    params: Optional[List[OscalCompleteOscalControlCommonParameter]] = Field(
        None, min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    parts: Optional[List[OscalCompleteOscalControlCommonPart]] = Field(
        None, min_length=1
    )


class Alter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    control_id: TokenDatatype = Field(
        ...,
        alias='control-id',
        description='A reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).',
        title='Control Identifier Reference',
    )
    removes: Optional[List[Remove]] = Field(None, min_length=1)
    adds: Optional[List[Add]] = Field(None, min_length=1)


class OscalCompleteOscalProfileModify(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    set_parameters: Optional[List[SetParameter]] = Field(
        None, alias='set-parameters', min_length=1
    )
    alters: Optional[List[Alter]] = Field(None, min_length=1)


class OscalCompleteOscalProfileSelectControlById(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    with_child_controls: Optional[TokenDatatype] = Field(
        None,
        alias='with-child-controls',
        description='When a control is included, whether its child (dependent) controls are also included.',
        title='Include Contained Controls with Control',
    )
    with_ids: Optional[List[OscalCompleteOscalProfileWithId]] = Field(
        None, alias='with-ids', min_length=1
    )
    matching: Optional[List[OscalCompleteOscalProfileMatching]] = Field(
        None, min_length=1
    )


class OscalCompleteOscalComponentDefinitionImplementedRequirement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given control implementation by a component.',
        title='Control Implementation Identifier',
    )
    control_id: TokenDatatype = Field(
        ...,
        alias='control-id',
        description='A reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).',
        title='Control Identifier Reference',
    )
    description: str = Field(
        ...,
        description='A suggestion from the supplier (e.g., component vendor or author) for how the specified control may be implemented if the containing component or capability is instantiated in a system security plan.',
        title='Control Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    set_parameters: Optional[
        List[OscalCompleteOscalImplementationCommonSetParameter]
    ] = Field(None, alias='set-parameters', min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    statements: Optional[List[OscalCompleteOscalComponentDefinitionStatement]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonProtocol(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: Optional[UUIDDatatype] = Field(
        None,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this service protocol information elsewhere in this or other OSCAL instances. The locally defined UUID of the service protocol can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Service Protocol Information Universally Unique Identifier',
    )
    name: Optional[StringDatatype] = Field(
        None,
        description='The common name of the protocol, which should be the appropriate "service name" from the IANA Service Name and Transport Protocol Port Number Registry.',
        title='Protocol Name',
    )
    title: Optional[str] = Field(
        None,
        description='A human readable name for the protocol (e.g., Transport Layer Security).',
        title='Protocol Title',
    )
    port_ranges: Optional[List[OscalCompleteOscalImplementationCommonPortRange]] = (
        Field(None, alias='port-ranges', min_length=1)
    )


class OscalCompleteOscalImplementationCommonAuthorizedPrivilege(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    title: str = Field(
        ...,
        description='A human readable name for the privilege.',
        title='Privilege Title',
    )
    description: Optional[str] = Field(
        None,
        description="A summary of the privilege's purpose within the system.",
        title='Privilege Description',
    )
    functions_performed: List[
        OscalCompleteOscalImplementationCommonFunctionPerformed
    ] = Field(..., alias='functions-performed', min_length=1)


class OscalCompleteOscalSspImpact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    base: OscalCompleteOscalSspBase
    selected: Optional[OscalCompleteOscalSspSelected] = None
    adjustment_justification: Optional[OscalCompleteOscalSspAdjustmentJustification] = (
        Field(None, alias='adjustment-justification')
    )


class OscalCompleteOscalSspAuthorizationBoundary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: str = Field(
        ...,
        description="A summary of the system's authorization boundary.",
        title='Authorization Boundary Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    diagrams: Optional[List[OscalCompleteOscalSspDiagram]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspStatement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    statement_id: TokenDatatype = Field(
        ...,
        alias='statement-id',
        description='A human-oriented identifier reference to a control statement.',
        title='Control Statement Reference',
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control statement elsewhere in this or other OSCAL instances. The UUID of the control statement in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).',
        title='Control Statement Reference Universally Unique Identifier',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    by_components: Optional[List[OscalCompleteOscalSspByComponent]] = Field(
        None, alias='by-components', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class TermsAndConditions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    parts: Optional[List[OscalCompleteOscalAssessmentCommonAssessmentPart]] = Field(
        None, min_length=1
    )


class OscalCompleteOscalAssessmentCommonLocalObjective(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    control_id: TokenDatatype = Field(
        ...,
        alias='control-id',
        description='A reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).',
        title='Control Identifier Reference',
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of this control objective.',
        title='Objective Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    parts: List[OscalCompleteOscalControlCommonPart] = Field(..., min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonAssessmentMethod(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment method elsewhere in this or other OSCAL instances. The locally defined UUID of the assessment method can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Method Universally Unique Identifier',
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of this assessment method.',
        title='Assessment Method Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    part: OscalCompleteOscalAssessmentCommonAssessmentPart
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class ControlSelection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of in-scope controls specified for assessment.',
        title='Assessed Controls Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    include_all: Optional[OscalCompleteOscalControlCommonIncludeAll] = Field(
        None, alias='include-all'
    )
    include_controls: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectControlById]
    ] = Field(None, alias='include-controls', min_length=1)
    exclude_controls: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectControlById]
    ] = Field(None, alias='exclude-controls', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class ControlObjectiveSelection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of this collection of control objectives.',
        title='Control Objectives Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    include_all: Optional[OscalCompleteOscalControlCommonIncludeAll] = Field(
        None, alias='include-all'
    )
    include_objectives: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectObjectiveById]
    ] = Field(None, alias='include-objectives', min_length=1)
    exclude_objectives: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectObjectiveById]
    ] = Field(None, alias='exclude-objectives', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonReviewedControls(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of control objectives.',
        title='Control Objective Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    control_selections: List[ControlSelection] = Field(
        ..., alias='control-selections', min_length=1
    )
    control_objective_selections: Optional[List[ControlObjectiveSelection]] = Field(
        None, alias='control-objective-selections', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonAssessmentSubject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    type: Union[TokenDatatype, Type5] = Field(
        ...,
        description='Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.',
        title='Subject Type',
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of the collection of subjects being included in this assessment.',
        title='Include Subjects Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    include_all: Optional[OscalCompleteOscalControlCommonIncludeAll] = Field(
        None, alias='include-all'
    )
    include_subjects: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectSubjectById]
    ] = Field(None, alias='include-subjects', min_length=1)
    exclude_subjects: Optional[
        List[OscalCompleteOscalAssessmentCommonSelectSubjectById]
    ] = Field(None, alias='exclude-subjects', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class IdentifiedSubject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    subject_placeholder_uuid: UUIDDatatype = Field(
        ...,
        alias='subject-placeholder-uuid',
        description='A machine-oriented identifier reference to a unique assessment subject placeholder defined by this task.',
        title='Assessment Subject Placeholder Universally Unique Identifier Reference',
    )
    subjects: List[OscalCompleteOscalAssessmentCommonAssessmentSubject] = Field(
        ..., min_length=1
    )


class OscalCompleteOscalAssessmentCommonRelatedTask(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    task_uuid: UUIDDatatype = Field(
        ...,
        alias='task-uuid',
        description='A machine-oriented identifier reference to a unique task.',
        title='Task Universally Unique Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    subjects: Optional[List[OscalCompleteOscalAssessmentCommonAssessmentSubject]] = (
        Field(None, min_length=1)
    )
    identified_subject: Optional[IdentifiedSubject] = Field(
        None,
        alias='identified-subject',
        description='Used to detail assessment subjects that were identfied by this task.',
        title='Identified Subject',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class RelatedResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    response_uuid: UUIDDatatype = Field(
        ...,
        alias='response-uuid',
        description='A machine-oriented identifier reference to a unique risk response.',
        title='Response Universally Unique Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    related_tasks: Optional[List[OscalCompleteOscalAssessmentCommonRelatedTask]] = (
        Field(None, alias='related-tasks', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Entry(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this risk log entry elsewhere in this or other OSCAL instances. The locally defined UUID of the risk log entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Risk Log Entry Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='The title for this risk log entry.', title='Title'
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of what was done regarding the risk.',
        title='Risk Task Description',
    )
    start: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='Identifies the start date and time of the event.',
        title='Start',
    )
    end: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.',
        title='End',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    logged_by: Optional[List[OscalCompleteOscalAssessmentCommonLoggedBy]] = Field(
        None, alias='logged-by', min_length=1
    )
    status_change: Optional[OscalCompleteOscalAssessmentCommonRiskStatus] = Field(
        None, alias='status-change'
    )
    related_responses: Optional[List[RelatedResponse]] = Field(
        None, alias='related-responses', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class RiskLog(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    entries: List[Entry] = Field(..., min_length=1)


class Entry1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference an assessment event in this or other OSCAL instances. The locally defined UUID of the assessment log entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Log Entry Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='The title for this event.', title='Action Title'
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable description of this event.',
        title='Action Description',
    )
    start: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='Identifies the start date and time of an event.',
        title='Start',
    )
    end: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.',
        title='End',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    logged_by: Optional[List[OscalCompleteOscalAssessmentCommonLoggedBy]] = Field(
        None, alias='logged-by', min_length=1
    )
    related_tasks: Optional[List[OscalCompleteOscalAssessmentCommonRelatedTask]] = (
        Field(None, alias='related-tasks', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class AssessmentLog(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    entries: List[Entry1] = Field(..., min_length=1)


class OscalCompleteOscalCatalogControl(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: TokenDatatype = Field(
        ...,
        description='Identifies a control such that it can be referenced in the defining catalog and other OSCAL instances (e.g., profiles).',
        title='Control Identifier',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description='A textual label that provides a sub-type or characterization of the control.',
        title='Control Class',
    )
    title: str = Field(
        ...,
        description='A name given to the control, which may be used by a tool for display and navigation.',
        title='Control Title',
    )
    params: Optional[List[OscalCompleteOscalControlCommonParameter]] = Field(
        None, min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    parts: Optional[List[OscalCompleteOscalControlCommonPart]] = Field(
        None, min_length=1
    )
    controls: Optional[List[OscalCompleteOscalCatalogControl]] = None


class Location(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A unique ID for the location, for reference.',
        title='Location Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None,
        description='A name given to the location, which may be used by a tool for display and navigation.',
        title='Location Title',
    )
    address: Optional[OscalCompleteOscalMetadataAddress] = None
    email_addresses: Optional[List[OscalCompleteOscalMetadataEmailAddress]] = Field(
        None, alias='email-addresses', min_length=1
    )
    telephone_numbers: Optional[List[OscalCompleteOscalMetadataTelephoneNumber]] = (
        Field(None, alias='telephone-numbers', min_length=1)
    )
    urls: Optional[List[URIDatatype]] = Field(None, min_length=1)
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Party(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A unique identifier for the party.',
        title='Party Universally Unique Identifier',
    )
    type: StringDatatype = Field(
        ...,
        description='A category describing the kind of party the object describes.',
        title='Party Type',
    )
    name: Optional[StringDatatype] = Field(
        None,
        description='The full name of the party. This is typically the legal name associated with the party.',
        title='Party Name',
    )
    short_name: Optional[StringDatatype] = Field(
        None,
        alias='short-name',
        description='A short common name, abbreviation, or acronym for the party.',
        title='Party Short Name',
    )
    external_ids: Optional[List[ExternalId]] = Field(
        None, alias='external-ids', min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    email_addresses: Optional[List[OscalCompleteOscalMetadataEmailAddress]] = Field(
        None, alias='email-addresses', min_length=1
    )
    telephone_numbers: Optional[List[OscalCompleteOscalMetadataTelephoneNumber]] = (
        Field(None, alias='telephone-numbers', min_length=1)
    )
    addresses: Optional[List[OscalCompleteOscalMetadataAddress]] = Field(
        None, min_length=1
    )
    location_uuids: Optional[List[OscalCompleteOscalMetadataLocationUuid]] = Field(
        None, alias='location-uuids', min_length=1
    )
    member_of_organizations: Optional[List[UUIDDatatype]] = Field(
        None, alias='member-of-organizations', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalMetadataMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    title: str = Field(
        ...,
        description='A name given to the document, which may be used by a tool for display and navigation.',
        title='Document Title',
    )
    published: Optional[OscalCompleteOscalMetadataPublished] = None
    last_modified: OscalCompleteOscalMetadataLastModified = Field(
        ..., alias='last-modified'
    )
    version: OscalCompleteOscalMetadataVersion
    oscal_version: OscalCompleteOscalMetadataOscalVersion = Field(
        ..., alias='oscal-version'
    )
    revisions: Optional[List[Revision]] = Field(None, min_length=1)
    document_ids: Optional[List[OscalCompleteOscalMetadataDocumentId]] = Field(
        None, alias='document-ids', min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    roles: Optional[List[Role]] = Field(None, min_length=1)
    locations: Optional[List[Location]] = Field(None, min_length=1)
    parties: Optional[List[Party]] = Field(None, min_length=1)
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    actions: Optional[List[OscalCompleteOscalMetadataAction]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalProfileImport(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    href: URIReferenceDatatype = Field(
        ...,
        description='A resolvable URL reference to the base catalog or profile that this profile is tailoring.',
        title='Catalog or Profile Reference',
    )
    include_all: Optional[OscalCompleteOscalControlCommonIncludeAll] = Field(
        None, alias='include-all'
    )
    include_controls: Optional[List[OscalCompleteOscalProfileSelectControlById]] = (
        Field(None, alias='include-controls', min_length=1)
    )
    exclude_controls: Optional[List[OscalCompleteOscalProfileSelectControlById]] = (
        Field(None, alias='exclude-controls', min_length=1)
    )


class OscalCompleteOscalProfileInsertControls(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    order: Optional[TokenDatatype] = Field(
        None,
        description='A designation of how a selection of controls in a profile is to be ordered.',
        title='Order',
    )
    include_all: Optional[OscalCompleteOscalControlCommonIncludeAll] = Field(
        None, alias='include-all'
    )
    include_controls: Optional[List[OscalCompleteOscalProfileSelectControlById]] = (
        Field(None, alias='include-controls', min_length=1)
    )
    exclude_controls: Optional[List[OscalCompleteOscalProfileSelectControlById]] = (
        Field(None, alias='exclude-controls', min_length=1)
    )


class OscalCompleteOscalComponentDefinitionControlImplementation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a means to identify a set of control implementations that are supported by a given component or capability.',
        title='Control Implementation Set Identifier',
    )
    source: URIReferenceDatatype = Field(
        ...,
        description='A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.',
        title='Source Resource Reference',
    )
    description: str = Field(
        ...,
        description='A description of how the specified set of controls are implemented for the containing component or capability.',
        title='Control Implementation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    set_parameters: Optional[
        List[OscalCompleteOscalImplementationCommonSetParameter]
    ] = Field(None, alias='set-parameters', min_length=1)
    implemented_requirements: List[
        OscalCompleteOscalComponentDefinitionImplementedRequirement
    ] = Field(..., alias='implemented-requirements', min_length=1)


class OscalCompleteOscalImplementationCommonSystemComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this component elsewhere in this or other OSCAL instances. The locally defined UUID of the component can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Component Identifier',
    )
    type: Union[StringDatatype, Type3] = Field(
        ...,
        description='A category describing the purpose of the component.',
        title='Component Type',
    )
    title: str = Field(
        ...,
        description='A human readable name for the system component.',
        title='Component Title',
    )
    description: str = Field(
        ...,
        description='A description of the component, including information about its function.',
        title='Component Description',
    )
    purpose: Optional[str] = Field(
        None,
        description='A summary of the technological or business purpose of the component.',
        title='Purpose',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    status: Status = Field(
        ...,
        description='Describes the operational status of the system component.',
        title='Status',
    )
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    protocols: Optional[List[OscalCompleteOscalImplementationCommonProtocol]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalImplementationCommonSystemUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this user class elsewhere in this or other OSCAL instances. The locally defined UUID of the system user can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='User Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None,
        description='A name given to the user, which may be used by a tool for display and navigation.',
        title='User Title',
    )
    short_name: Optional[StringDatatype] = Field(
        None,
        alias='short-name',
        description='A short common name, abbreviation, or acronym for the user.',
        title='User Short Name',
    )
    description: Optional[str] = Field(
        None,
        description="A summary of the user's purpose within the system.",
        title='User Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    role_ids: Optional[List[OscalCompleteOscalMetadataRoleId]] = Field(
        None, alias='role-ids', min_length=1
    )
    authorized_privileges: Optional[
        List[OscalCompleteOscalImplementationCommonAuthorizedPrivilege]
    ] = Field(None, alias='authorized-privileges', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class InformationType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: Optional[UUIDDatatype] = Field(
        None,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this information type elsewhere in this or other OSCAL instances. The locally defined UUID of the information type can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Information Type Universally Unique Identifier',
    )
    title: str = Field(
        ...,
        description='A human readable name for the information type. This title should be meaningful within the context of the system.',
        title='title field',
    )
    description: str = Field(
        ...,
        description='A summary of how this information type is used within the system.',
        title='Information Type Description',
    )
    categorizations: Optional[List[Categorization]] = Field(None, min_length=1)
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    confidentiality_impact: Optional[OscalCompleteOscalSspImpact] = Field(
        None, alias='confidentiality-impact'
    )
    integrity_impact: Optional[OscalCompleteOscalSspImpact] = Field(
        None, alias='integrity-impact'
    )
    availability_impact: Optional[OscalCompleteOscalSspImpact] = Field(
        None, alias='availability-impact'
    )


class OscalCompleteOscalSspSystemInformation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    information_types: List[InformationType] = Field(
        ..., alias='information-types', min_length=1
    )


class OscalCompleteOscalSspSystemImplementation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    leveraged_authorizations: Optional[List[LeveragedAuthorization]] = Field(
        None, alias='leveraged-authorizations', min_length=1
    )
    users: List[OscalCompleteOscalImplementationCommonSystemUser] = Field(
        ..., min_length=1
    )
    components: List[OscalCompleteOscalImplementationCommonSystemComponent] = Field(
        ..., min_length=1
    )
    inventory_items: Optional[
        List[OscalCompleteOscalImplementationCommonInventoryItem]
    ] = Field(None, alias='inventory-items', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspImplementedRequirement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control requirement elsewhere in this or other OSCAL instances. The locally defined UUID of the control requirement can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Control Requirement Universally Unique Identifier',
    )
    control_id: TokenDatatype = Field(
        ...,
        alias='control-id',
        description='A reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).',
        title='Control Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    set_parameters: Optional[
        List[OscalCompleteOscalImplementationCommonSetParameter]
    ] = Field(None, alias='set-parameters', min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    statements: Optional[List[OscalCompleteOscalSspStatement]] = Field(
        None, min_length=1
    )
    by_components: Optional[List[OscalCompleteOscalSspByComponent]] = Field(
        None, alias='by-components', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class Step(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this step elsewhere in this or other OSCAL instances. The locally defined UUID of the step (in a series of steps) can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Step Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='The title for this step.', title='Step Title'
    )
    description: str = Field(
        ...,
        description='A human-readable description of this step.',
        title='Step Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    reviewed_controls: Optional[OscalCompleteOscalAssessmentCommonReviewedControls] = (
        Field(None, alias='reviewed-controls')
    )
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonActivity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment activity elsewhere in this or other OSCAL instances. The locally defined UUID of the activity can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Activity Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None,
        description='The title for this included activity.',
        title='Included Activity Title',
    )
    description: str = Field(
        ...,
        description='A human-readable description of this included activity.',
        title='Included Activity Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    steps: Optional[List[Step]] = Field(None, min_length=1)
    related_controls: Optional[OscalCompleteOscalAssessmentCommonReviewedControls] = (
        Field(None, alias='related-controls')
    )
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class AssociatedActivity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    activity_uuid: UUIDDatatype = Field(
        ...,
        alias='activity-uuid',
        description='A machine-oriented identifier reference to an activity defined in the list of activities.',
        title='Activity Universally Unique Identifier Reference',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    subjects: List[OscalCompleteOscalAssessmentCommonAssessmentSubject] = Field(
        ..., min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonTask(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this task elsewhere in this or other OSCAL instances. The locally defined UUID of the task can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Task Universally Unique Identifier',
    )
    type: Union[TokenDatatype, Type4] = Field(
        ..., description='The type of task.', title='Task Type'
    )
    title: str = Field(..., description='The title for this task.', title='Task Title')
    description: Optional[str] = Field(
        None,
        description='A human-readable description of this task.',
        title='Task Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    timing: Optional[Timing] = Field(
        None,
        description='The timing under which the task is intended to occur.',
        title='Event Timing',
    )
    dependencies: Optional[List[Dependency]] = Field(None, min_length=1)
    tasks: Optional[List[OscalCompleteOscalAssessmentCommonTask]] = None
    associated_activities: Optional[List[AssociatedActivity]] = Field(
        None, alias='associated-activities', min_length=1
    )
    subjects: Optional[List[OscalCompleteOscalAssessmentCommonAssessmentSubject]] = (
        Field(None, min_length=1)
    )
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonAssessmentAssets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    components: Optional[
        List[OscalCompleteOscalImplementationCommonSystemComponent]
    ] = Field(None, min_length=1)
    assessment_platforms: List[AssessmentPlatform] = Field(
        ..., alias='assessment-platforms', min_length=1
    )


class OscalCompleteOscalAssessmentCommonOrigin(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    actors: List[OscalCompleteOscalAssessmentCommonOriginActor] = Field(
        ..., min_length=1
    )
    related_tasks: Optional[List[OscalCompleteOscalAssessmentCommonRelatedTask]] = (
        Field(None, alias='related-tasks', min_length=1)
    )


class OscalCompleteOscalAssessmentCommonCharacterization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    origin: OscalCompleteOscalAssessmentCommonOrigin
    facets: List[Facet] = Field(..., min_length=1)


class OscalCompleteOscalAssessmentCommonResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this remediation elsewhere in this or other OSCAL instances. The locally defined UUID of the risk response can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Remediation Universally Unique Identifier',
    )
    lifecycle: Union[TokenDatatype, Lifecycle] = Field(
        ...,
        description='Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.',
        title='Remediation Intent',
    )
    title: str = Field(
        ..., description='The title for this response activity.', title='Response Title'
    )
    description: str = Field(
        ...,
        description='A human-readable description of this response plan.',
        title='Response Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    origins: Optional[List[OscalCompleteOscalAssessmentCommonOrigin]] = Field(
        None, min_length=1
    )
    required_assets: Optional[List[RequiredAsset]] = Field(
        None, alias='required-assets', min_length=1
    )
    tasks: Optional[List[OscalCompleteOscalAssessmentCommonTask]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class LocalDefinitions1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    objectives_and_methods: Optional[
        List[OscalCompleteOscalAssessmentCommonLocalObjective]
    ] = Field(None, alias='objectives-and-methods', min_length=1)
    activities: Optional[List[OscalCompleteOscalAssessmentCommonActivity]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class LocalDefinitions2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    components: Optional[
        List[OscalCompleteOscalImplementationCommonSystemComponent]
    ] = Field(None, min_length=1)
    inventory_items: Optional[
        List[OscalCompleteOscalImplementationCommonInventoryItem]
    ] = Field(None, alias='inventory-items', min_length=1)
    users: Optional[List[OscalCompleteOscalImplementationCommonSystemUser]] = Field(
        None, min_length=1
    )
    assessment_assets: Optional[OscalCompleteOscalAssessmentCommonAssessmentAssets] = (
        Field(None, alias='assessment-assets')
    )
    tasks: Optional[List[OscalCompleteOscalAssessmentCommonTask]] = Field(
        None, min_length=1
    )


class OscalCompleteOscalPoamLocalDefinitions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    components: Optional[
        List[OscalCompleteOscalImplementationCommonSystemComponent]
    ] = Field(None, min_length=1)
    inventory_items: Optional[
        List[OscalCompleteOscalImplementationCommonInventoryItem]
    ] = Field(None, alias='inventory-items', min_length=1)
    assessment_assets: Optional[OscalCompleteOscalAssessmentCommonAssessmentAssets] = (
        Field(None, alias='assessment-assets')
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalCatalogGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: Optional[TokenDatatype] = Field(
        None,
        description='Identifies the group for the purpose of cross-linking within the defining instance or from other instances that reference the catalog.',
        title='Group Identifier',
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description='A textual label that provides a sub-type or characterization of the group.',
        title='Group Class',
    )
    title: str = Field(
        ...,
        description='A name given to the group, which may be used by a tool for display and navigation.',
        title='Group Title',
    )
    params: Optional[List[OscalCompleteOscalControlCommonParameter]] = Field(
        None, min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    parts: Optional[List[OscalCompleteOscalControlCommonPart]] = Field(
        None, min_length=1
    )
    groups: Optional[List[OscalCompleteOscalCatalogGroup]] = None
    controls: Optional[List[OscalCompleteOscalCatalogControl]] = Field(
        None, min_length=1
    )


class OscalCompleteOscalProfileGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    id: Optional[TokenDatatype] = Field(
        None, description='Identifies the group.', title='Group Identifier'
    )
    class_: Optional[TokenDatatype] = Field(
        None,
        alias='class',
        description='A textual label that provides a sub-type or characterization of the group.',
        title='Group Class',
    )
    title: str = Field(
        ...,
        description='A name to be given to the group for use in display.',
        title='Group Title',
    )
    params: Optional[List[OscalCompleteOscalControlCommonParameter]] = Field(
        None, min_length=1
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    parts: Optional[List[OscalCompleteOscalControlCommonPart]] = Field(
        None, min_length=1
    )
    groups: Optional[List[OscalCompleteOscalProfileGroup]] = None
    insert_controls: Optional[List[OscalCompleteOscalProfileInsertControls]] = Field(
        None, alias='insert-controls', min_length=1
    )


class OscalCompleteOscalComponentDefinitionDefinedComponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given component.',
        title='Component Identifier',
    )
    type: Union[StringDatatype, Type2] = Field(
        ...,
        description='A category describing the purpose of the component.',
        title='Component Type',
    )
    title: str = Field(
        ...,
        description='A human readable name for the component.',
        title='Component Title',
    )
    description: str = Field(
        ...,
        description='A description of the component, including information about its function.',
        title='Component Description',
    )
    purpose: Optional[str] = Field(
        None,
        description='A summary of the technological or business purpose of the component.',
        title='Purpose',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    responsible_roles: Optional[List[OscalCompleteOscalMetadataResponsibleRole]] = (
        Field(None, alias='responsible-roles', min_length=1)
    )
    protocols: Optional[List[OscalCompleteOscalImplementationCommonProtocol]] = Field(
        None, min_length=1
    )
    control_implementations: Optional[
        List[OscalCompleteOscalComponentDefinitionControlImplementation]
    ] = Field(None, alias='control-implementations', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalComponentDefinitionCapability(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given capability.',
        title='Capability Identifier',
    )
    name: StringDatatype = Field(
        ...,
        description="The capability's human-readable name.",
        title='Capability Name',
    )
    description: str = Field(
        ..., description='A summary of the capability.', title='Capability Description'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    incorporates_components: Optional[
        List[OscalCompleteOscalComponentDefinitionIncorporatesComponent]
    ] = Field(None, alias='incorporates-components', min_length=1)
    control_implementations: Optional[
        List[OscalCompleteOscalComponentDefinitionControlImplementation]
    ] = Field(None, alias='control-implementations', min_length=1)
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspSystemCharacteristics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    system_ids: List[OscalCompleteOscalImplementationCommonSystemId] = Field(
        ..., alias='system-ids', min_length=1
    )
    system_name: StringDatatype = Field(
        ...,
        alias='system-name',
        description='The full name of the system.',
        title='System Name - Full',
    )
    system_name_short: Optional[StringDatatype] = Field(
        None,
        alias='system-name-short',
        description='A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.',
        title='System Name - Short',
    )
    description: str = Field(
        ..., description='A summary of the system.', title='System Description'
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    date_authorized: Optional[OscalCompleteOscalSspDateAuthorized] = Field(
        None, alias='date-authorized'
    )
    security_sensitivity_level: Optional[StringDatatype] = Field(
        None,
        alias='security-sensitivity-level',
        description='The overall information system sensitivity categorization, such as defined by FIPS-199.',
        title='Security Sensitivity Level',
    )
    system_information: OscalCompleteOscalSspSystemInformation = Field(
        ..., alias='system-information'
    )
    security_impact_level: Optional[OscalCompleteOscalSspSecurityImpactLevel] = Field(
        None, alias='security-impact-level'
    )
    status: OscalCompleteOscalSspStatus
    authorization_boundary: OscalCompleteOscalSspAuthorizationBoundary = Field(
        ..., alias='authorization-boundary'
    )
    network_architecture: Optional[OscalCompleteOscalSspNetworkArchitecture] = Field(
        None, alias='network-architecture'
    )
    data_flow: Optional[OscalCompleteOscalSspDataFlow] = Field(None, alias='data-flow')
    responsible_parties: Optional[List[OscalCompleteOscalMetadataResponsibleParty]] = (
        Field(None, alias='responsible-parties', min_length=1)
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalSspControlImplementation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    description: str = Field(
        ...,
        description='A statement describing important things to know about how this set of control satisfaction documentation is approached.',
        title='Control Implementation Description',
    )
    set_parameters: Optional[
        List[OscalCompleteOscalImplementationCommonSetParameter]
    ] = Field(None, alias='set-parameters', min_length=1)
    implemented_requirements: List[OscalCompleteOscalSspImplementedRequirement] = Field(
        ..., alias='implemented-requirements', min_length=1
    )


class LocalDefinitions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    components: Optional[
        List[OscalCompleteOscalImplementationCommonSystemComponent]
    ] = Field(None, min_length=1)
    inventory_items: Optional[
        List[OscalCompleteOscalImplementationCommonInventoryItem]
    ] = Field(None, alias='inventory-items', min_length=1)
    users: Optional[List[OscalCompleteOscalImplementationCommonSystemUser]] = Field(
        None, min_length=1
    )
    objectives_and_methods: Optional[
        List[OscalCompleteOscalAssessmentCommonLocalObjective]
    ] = Field(None, alias='objectives-and-methods', min_length=1)
    activities: Optional[List[OscalCompleteOscalAssessmentCommonActivity]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalApAssessmentPlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment plan in this or other OSCAL instances. The locally defined UUID of the assessment plan can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Plan Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    import_ssp: OscalCompleteOscalAssessmentCommonImportSsp = Field(
        ..., alias='import-ssp'
    )
    local_definitions: Optional[LocalDefinitions] = Field(
        None,
        alias='local-definitions',
        description='Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.',
        title='Local Definitions',
    )
    terms_and_conditions: Optional[TermsAndConditions] = Field(
        None,
        alias='terms-and-conditions',
        description='Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.',
        title='Assessment Plan Terms and Conditions',
    )
    reviewed_controls: OscalCompleteOscalAssessmentCommonReviewedControls = Field(
        ..., alias='reviewed-controls'
    )
    assessment_subjects: Optional[
        List[OscalCompleteOscalAssessmentCommonAssessmentSubject]
    ] = Field(None, alias='assessment-subjects', min_length=1)
    assessment_assets: Optional[OscalCompleteOscalAssessmentCommonAssessmentAssets] = (
        Field(None, alias='assessment-assets')
    )
    tasks: Optional[List[OscalCompleteOscalAssessmentCommonTask]] = Field(
        None, min_length=1
    )
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class OscalCompleteOscalAssessmentCommonFinding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this finding in this or other OSCAL instances. The locally defined UUID of the finding can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Finding Universally Unique Identifier',
    )
    title: str = Field(
        ..., description='The title for this finding.', title='Finding Title'
    )
    description: str = Field(
        ...,
        description='A human-readable description of this finding.',
        title='Finding Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    origins: Optional[List[OscalCompleteOscalAssessmentCommonOrigin]] = Field(
        None, min_length=1
    )
    target: OscalCompleteOscalAssessmentCommonFindingTarget
    implementation_statement_uuid: Optional[UUIDDatatype] = Field(
        None,
        alias='implementation-statement-uuid',
        description='A machine-oriented identifier reference to the implementation statement in the SSP to which this finding is related.',
        title='Implementation Statement UUID',
    )
    related_observations: Optional[List[RelatedObservation]] = Field(
        None, alias='related-observations', min_length=1
    )
    related_risks: Optional[List[RelatedRisk]] = Field(
        None, alias='related-risks', min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonObservation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this observation elsewhere in this or other OSCAL instances. The locally defined UUID of the observation can be used to reference the data item locally or globally (e.g., in an imorted OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Observation Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='The title for this observation.', title='Observation Title'
    )
    description: str = Field(
        ...,
        description='A human-readable description of this assessment observation.',
        title='Observation Description',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    methods: List[Union[StringDatatype, Methods]] = Field(..., min_length=1)
    types: Optional[List[Union[TokenDatatype, Types]]] = Field(None, min_length=1)
    origins: Optional[List[OscalCompleteOscalAssessmentCommonOrigin]] = Field(
        None, min_length=1
    )
    subjects: Optional[List[OscalCompleteOscalAssessmentCommonSubjectReference]] = (
        Field(None, min_length=1)
    )
    relevant_evidence: Optional[List[RelevantEvidenceItem]] = Field(
        None, alias='relevant-evidence', min_length=1
    )
    collected: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='Date/time stamp identifying when the finding information was collected.',
        title='Collected Field',
    )
    expires: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.',
        title='Expires Field',
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalAssessmentCommonRisk(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this risk elsewhere in this or other OSCAL instances. The locally defined UUID of the risk can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Risk Universally Unique Identifier',
    )
    title: str = Field(..., description='The title for this risk.', title='Risk Title')
    description: str = Field(
        ...,
        description='A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.',
        title='Risk Description',
    )
    statement: str = Field(
        ...,
        description='An summary of impact for how the risk affects the system.',
        title='Risk Statement',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    status: OscalCompleteOscalAssessmentCommonRiskStatus
    origins: Optional[List[OscalCompleteOscalAssessmentCommonOrigin]] = Field(
        None, min_length=1
    )
    threat_ids: Optional[List[OscalCompleteOscalAssessmentCommonThreatId]] = Field(
        None, alias='threat-ids', min_length=1
    )
    characterizations: Optional[
        List[OscalCompleteOscalAssessmentCommonCharacterization]
    ] = Field(None, min_length=1)
    mitigating_factors: Optional[List[MitigatingFactor]] = Field(
        None, alias='mitigating-factors', min_length=1
    )
    deadline: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='The date/time by which the risk must be resolved.',
        title='Risk Resolution Deadline',
    )
    remediations: Optional[List[OscalCompleteOscalAssessmentCommonResponse]] = Field(
        None, min_length=1
    )
    risk_log: Optional[RiskLog] = Field(
        None,
        alias='risk-log',
        description='A log of all risk-related tasks taken.',
        title='Risk Log',
    )
    related_observations: Optional[List[RelatedObservation]] = Field(
        None, alias='related-observations', min_length=1
    )


class OscalCompleteOscalArResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this set of results in this or other OSCAL instances. The locally defined UUID of the assessment result can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Results Universally Unique Identifier',
    )
    title: str = Field(
        ..., description='The title for this set of results.', title='Results Title'
    )
    description: str = Field(
        ...,
        description='A human-readable description of this set of test results.',
        title='Results Description',
    )
    start: DateTimeWithTimezoneDatatype = Field(
        ...,
        description='Date/time stamp identifying the start of the evidence collection reflected in these results.',
        title='start field',
    )
    end: Optional[DateTimeWithTimezoneDatatype] = Field(
        None,
        description='Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.',
        title='end field',
    )
    props: Optional[List[OscalCompleteOscalMetadataProperty]] = Field(
        None, min_length=1
    )
    links: Optional[List[OscalCompleteOscalMetadataLink]] = Field(None, min_length=1)
    local_definitions: Optional[LocalDefinitions2] = Field(
        None,
        alias='local-definitions',
        description='Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.',
        title='Local Definitions',
    )
    reviewed_controls: OscalCompleteOscalAssessmentCommonReviewedControls = Field(
        ..., alias='reviewed-controls'
    )
    attestations: Optional[List[Attestation]] = Field(None, min_length=1)
    assessment_log: Optional[AssessmentLog] = Field(
        None,
        alias='assessment-log',
        description='A log of all assessment-related actions taken.',
        title='Assessment Log',
    )
    observations: Optional[List[OscalCompleteOscalAssessmentCommonObservation]] = Field(
        None, min_length=1
    )
    risks: Optional[List[OscalCompleteOscalAssessmentCommonRisk]] = Field(
        None, min_length=1
    )
    findings: Optional[List[OscalCompleteOscalAssessmentCommonFinding]] = Field(
        None, min_length=1
    )
    remarks: Optional[OscalCompleteOscalMetadataRemarks] = None


class OscalCompleteOscalPoamPlanOfActionAndMilestones(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with instancescope that can be used to reference this POA&M instance in this OSCAL instance. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='POA&M Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    import_ssp: Optional[OscalCompleteOscalAssessmentCommonImportSsp] = Field(
        None, alias='import-ssp'
    )
    system_id: Optional[OscalCompleteOscalImplementationCommonSystemId] = Field(
        None, alias='system-id'
    )
    local_definitions: Optional[OscalCompleteOscalPoamLocalDefinitions] = Field(
        None, alias='local-definitions'
    )
    observations: Optional[List[OscalCompleteOscalAssessmentCommonObservation]] = Field(
        None, min_length=1
    )
    risks: Optional[List[OscalCompleteOscalAssessmentCommonRisk]] = Field(
        None, min_length=1
    )
    findings: Optional[List[OscalCompleteOscalAssessmentCommonFinding]] = Field(
        None, min_length=1
    )
    poam_items: List[OscalCompleteOscalPoamPoamItem] = Field(
        ..., alias='poam-items', min_length=1
    )
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class Model5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    assessment_plan: OscalCompleteOscalApAssessmentPlan = Field(
        ..., alias='assessment-plan'
    )


class Model7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    plan_of_action_and_milestones: OscalCompleteOscalPoamPlanOfActionAndMilestones = (
        Field(..., alias='plan-of-action-and-milestones')
    )


class OscalCompleteOscalCatalogCatalog(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given catalog instance.',
        title='Catalog Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    params: Optional[List[OscalCompleteOscalControlCommonParameter]] = Field(
        None, min_length=1
    )
    controls: Optional[List[OscalCompleteOscalCatalogControl]] = Field(
        None, min_length=1
    )
    groups: Optional[List[OscalCompleteOscalCatalogGroup]] = Field(None, min_length=1)
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class Custom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    groups: Optional[List[OscalCompleteOscalProfileGroup]] = Field(None, min_length=1)
    insert_controls: Optional[List[OscalCompleteOscalProfileInsertControls]] = Field(
        None, alias='insert-controls', min_length=1
    )


class OscalCompleteOscalProfileMerge(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    combine: Optional[Combine] = Field(
        None,
        description='A Combine element defines how to resolve duplicate instances of the same control (e.g., controls with the same ID).',
        title='Combination Rule',
    )
    flat: Optional[Dict[str, Any]] = Field(
        None,
        description='Directs that controls appear without any grouping structure.',
        title='Flat Without Grouping',
    )
    as_is: Optional[BooleanDatatype] = Field(
        None,
        alias='as-is',
        description='Indicates that the controls selected should retain their original grouping as defined in the import source.',
        title='Group As-Is',
    )
    custom: Optional[Custom] = Field(
        None,
        description='Provides an alternate grouping structure that selected controls will be placed in.',
        title='Custom Grouping',
    )


class OscalCompleteOscalComponentDefinitionComponentDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given component definition instance.',
        title='Component Definition Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    import_component_definitions: Optional[
        List[OscalCompleteOscalComponentDefinitionImportComponentDefinition]
    ] = Field(None, alias='import-component-definitions', min_length=1)
    components: Optional[
        List[OscalCompleteOscalComponentDefinitionDefinedComponent]
    ] = Field(None, min_length=1)
    capabilities: Optional[List[OscalCompleteOscalComponentDefinitionCapability]] = (
        Field(None, min_length=1)
    )
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class OscalCompleteOscalSspSystemSecurityPlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this system security plan (SSP) elsewhere in this or other OSCAL instances. The locally defined UUID of the SSP can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='System Security Plan Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    import_profile: OscalCompleteOscalSspImportProfile = Field(
        ..., alias='import-profile'
    )
    system_characteristics: OscalCompleteOscalSspSystemCharacteristics = Field(
        ..., alias='system-characteristics'
    )
    system_implementation: OscalCompleteOscalSspSystemImplementation = Field(
        ..., alias='system-implementation'
    )
    control_implementation: OscalCompleteOscalSspControlImplementation = Field(
        ..., alias='control-implementation'
    )
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class OscalCompleteOscalArAssessmentResults(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment results instance in this or other OSCAL instances. The locally defined UUID of the assessment result can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.',
        title='Assessment Results Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    import_ap: OscalCompleteOscalArImportAp = Field(..., alias='import-ap')
    local_definitions: Optional[LocalDefinitions1] = Field(
        None,
        alias='local-definitions',
        description='Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.',
        title='Local Definitions',
    )
    results: List[OscalCompleteOscalArResult] = Field(..., min_length=1)
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class Model1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    catalog: OscalCompleteOscalCatalogCatalog


class Model3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    component_definition: OscalCompleteOscalComponentDefinitionComponentDefinition = (
        Field(..., alias='component-definition')
    )


class Model4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    system_security_plan: OscalCompleteOscalSspSystemSecurityPlan = Field(
        ..., alias='system-security-plan'
    )


class Model6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    assessment_results: OscalCompleteOscalArAssessmentResults = Field(
        ..., alias='assessment-results'
    )


class OscalCompleteOscalProfileProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    uuid: UUIDDatatype = Field(
        ...,
        description='Provides a globally unique means to identify a given profile instance.',
        title='Profile Universally Unique Identifier',
    )
    metadata: OscalCompleteOscalMetadataMetadata
    imports: List[OscalCompleteOscalProfileImport] = Field(..., min_length=1)
    merge: Optional[OscalCompleteOscalProfileMerge] = None
    modify: Optional[OscalCompleteOscalProfileModify] = None
    back_matter: Optional[OscalCompleteOscalMetadataBackMatter] = Field(
        None, alias='back-matter'
    )


class Model2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_schema: Optional[JsonSchemaDirective] = Field(None, alias='$schema')
    profile: OscalCompleteOscalProfileProfile


class Model(RootModel[Union[Model1, Model2, Model3, Model4, Model5, Model6, Model7]]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Union[Model1, Model2, Model3, Model4, Model5, Model6, Model7]


OscalCompleteOscalAssessmentCommonAssessmentPart.model_rebuild()
OscalCompleteOscalControlCommonPart.model_rebuild()
OscalCompleteOscalCatalogControl.model_rebuild()
OscalCompleteOscalAssessmentCommonTask.model_rebuild()
OscalCompleteOscalCatalogGroup.model_rebuild()
OscalCompleteOscalProfileGroup.model_rebuild()
